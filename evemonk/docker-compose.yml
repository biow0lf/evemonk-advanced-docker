version: '3.7'

volumes:
  postresql_data: {}
  redis_data: {}
  app_shared: {}
  pghero_shared: {}
  elasticsearch_data: {}
  https_portal: {}
  prometheus_data: {}
  grafana_data: {}

services:
  nginx:
    image: 'nginx:1.16.0'
    container_name: evemonk_nginx
    restart: unless-stopped
    volumes:
      - 'app_shared:/shared'
      - 'pghero_shared:/shared2'
      - './nginx-evemonk.conf:/etc/nginx/conf.d/default.conf:ro'
    depends_on:
      - backend

  https_portal:
    image: 'steveltn/https-portal:1.7.2'
    container_name: evemonk_https_portal
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - 'https_portal:/var/lib/https-portal'
    environment:
      STAGE: 'production'
      DOMAINS: 'evemonk.com -> http://nginx,
                www.evemonk.com => https://evemonk.com,
                cadvisor.evemonk.com -> http://cadvisor:8080,
                pghero.evemonk.com -> http://nginx,
                grafana.evemonk.com -> http://grafana:3000,
                prometheus.evemonk.com -> http://prometheus:9090,
                username:password@kibana.evemonk.com -> http://kibana:5601'

  redis:
    image: 'redis:5.0.5'
    container_name: evemonk_redis
    restart: unless-stopped
    volumes:
      - 'redis_data:/data'

  redis_exporter:
    image: 'oliver006/redis_exporter:v1.0.3'
    container_name: evemonk_redis_exporter
    restart: unless-stopped
    depends_on:
      - redis
    command:
      - '--redis.addr=redis://redis:6379'

  memcached:
    image: 'memcached:1.5.16'
    container_name: evemonk_memcached
    restart: unless-stopped
    command: memcached -m 64

  memcached_exporter:
    image: 'prom/memcached-exporter:v0.5.0'
    container_name: evemonk_memcached_exporter
    restart: unless-stopped
    depends_on:
      - memcached
    command:
      - '--memcached.address=memcached:11211'

  postgresql:
    image: 'postgres:11.4'
    container_name: evemonk_postgresql
    restart: unless-stopped
    volumes:
      - 'postresql_data:/var/lib/postgresql/data'
      - './postgres:/docker-entrypoint-initdb.d'

  postgres_exporter:
    image: 'wrouesnel/postgres_exporter:v0.5.1'
    container_name: evemonk_postgres_exporter
    restart: unless-stopped
    env_file: .env_postgres_exporter
    depends_on:
      - postgresql

  prometheus:
    image: 'prom/prometheus:v2.11.1'
    container_name: evemonk_prometheus
    restart: unless-stopped
    volumes:
      - './prometheus/:/etc/prometheus/'
      - 'prometheus_data:/prometheus'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  node_exporter:
    image: 'prom/node-exporter:v0.18.1'
    container_name: evemonk_node_exporter
    restart: unless-stopped
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'

  cadvisor:
    image: 'google/cadvisor:v0.33.0'
    container_name: evemonk_cadvisor
    restart: unless-stopped
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'

  alertmanager:
    image: 'prom/alertmanager:v0.18.0'
    container_name: evemonk_alertmanager
    restart: unless-stopped
    ports:
      - '9093:9093'
    volumes:
      - './alertmanager/:/etc/alertmanager/'
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

#  karma:
#    image: 'lmierzwa/karma:v0.39'
#    container_name: evemonk_karma
#    restart: unless-stopped

  grafana:
    image: 'grafana/grafana:6.3.0'
    container_name: evemonk_grafana
    restart: unless-stopped
    user: '104'
    depends_on:
      - prometheus
    volumes:
      - 'grafana_data:/var/lib/grafana'
      - './grafana/provisioning/:/etc/grafana/provisioning/'
    env_file:
      - './grafana/config.monitoring'

  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.3.0'
    container_name: evemonk_elasticsearch
    restart: unless-stopped
    volumes:
      # - './elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - 'elasticsearch_data:/usr/share/elasticsearch/data'
    environment:
      - 'discovery.type=single-node'
      - 'ES_JAVA_OPTS=-Xms256M -Xmx256M'

  elasticsearch_exporter:
    image: 'justwatch/elasticsearch_exporter:1.0.2'
    container_name: evemonk_elasticsearch_exporter
    command:
      - '-es.uri=http://elasticsearch:9200'
    restart: unless-stopped
    depends_on:
      - 'elasticsearch'

  logstash:
    image: 'docker.elastic.co/logstash/logstash:7.3.0'
    container_name: evemonk_logstash
    restart: unless-stopped
    volumes:
      - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro'
      - './logstash/pipeline:/usr/share/logstash/pipeline:ro'
    ports:
      - '5000:5000'
    environment:
      - 'LS_JAVA_OPTS=-Xmx256m -Xms256m'
    depends_on:
      - 'elasticsearch'

  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.3.0'
    container_name: evemonk_kibana
    restart: unless-stopped
    volumes:
      - './kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro'
    depends_on:
      - elasticsearch

  # filebeat:
  #   image: 'docker.elastic.co/beats/filebeat:7.3.0'
  #   container_name: evemonk_filebeat
  #   restart: unless-stopped
  #   volumes:
  #     - './filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro'
  #     - '/var/lib/docker/containers:/var/lib/docker/containers:ro'
  #     - '/var/run/docker.sock:/var/run/docker.sock:ro'
  #   depends_on:
  #     - elasticsearch

#  sentry:
#    image: ''
#    depends_on:
#      - postgresql
#      - redis

  pghero:
    image: 'biow0lf/evemonk-pghero:latest'
    container_name: evemonk_pghero
    restart: unless-stopped
    env_file: .env
    command: ./bin/app.sh
    volumes:
      - 'pghero_shared:/shared'
    depends_on:
      - postgresql

  prerender:
    image: 'magnetme/prerender-docker:v2.4.0'
    container_name: evemonk_prerender
    restart: unless-stopped

  backend:
    image: 'biow0lf/evemonk:latest'
    container_name: evemonk_backend
    restart: unless-stopped
    env_file: .env
    command: ./bin/backend.sh
    volumes:
      - 'app_shared:/shared'
      - './newrelic.yml:/app/config/newrelic.yml:ro'
    depends_on:
      - redis
      - memcached
      - postgresql
      - elasticsearch
      - logstash
      - prerender
#      - sentry

  sidekiq:
    image: 'biow0lf/evemonk:latest'
    container_name: evemonk_sidekiq
    restart: unless-stopped
    env_file: .env
    environment:
      PORT: 5100
    ports:
      - '5100:5100'
    command: ./bin/sidekiq.sh
    volumes:
      - 'app_shared:/shared'
      - './newrelic.yml:/app/config/newrelic.yml:ro'
    depends_on:
      - redis
      - memcached
      - postgresql
      - elasticsearch
      - logstash
#      - sentry
